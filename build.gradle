buildscript {
    Properties constants = new Properties()
    file("$projectDir/./constants.properties").withInputStream { constants.load(it) }
    File secretPropsFile = file('./local.properties')
    if (secretPropsFile.exists()) {
        Properties p = new Properties()
        p.load(new FileInputStream(secretPropsFile))
        p.each { name, value ->
            ext[name] = value
        }
    }
    ext {

        kotlin_version = constants.getProperty("kotlinVersion")

        corda_release_group = constants.getProperty("cordaReleaseGroup")
        corda_core_release_group =  constants.getProperty("cordaCoreReleaseGroup")
        corda_release_version = constants.getProperty("cordaVersion")
        corda_core_release_version = constants.getProperty("cordaVersion")
        corda_gradle_plugins_version = constants.getProperty("gradlePluginsVersion")

        confidential_id_release_group = "com.r3.corda.lib.ci"
        confidential_id_release_version = "1.0"
        accounts_release_group = 'com.r3.corda.lib.accounts'
        accounts_release_version = '1.0'

        junit_version = constants.getProperty("junitVersion")
        quasar_version = constants.getProperty("quasarVersion")
        log4j_version = constants.getProperty("log4jVersion")
        slf4j_version = constants.getProperty("slf4jVersion")
        corda_platform_version = constants.getProperty("platformVersion").toInteger()
        //springboot
        spring_version = '5.2.10.RELEASE'
        spring_boot_version = '2.3.5.RELEASE'
        spring_boot_gradle_plugin_version = '2.3.5.RELEASE'
        // Misc
        corda_solutions_version = '2.0'
        kotlinx_coroutines_version = '0.30.2'
        jackson_version = "2.10.5"
        hibernate_version = '5.4.3.Final'
        artemis_version = "2.6.2"
        netty_version = constants.getProperty("nettyVersion")
        dokka_version = '0.9.17'
        jupiter_api = '5.6.2'

        kotlinutils_version = '0.20'
        corbeans_version = '0.51'
        scrudbeans_version = '0.28'
        testacles_version = '0.14'
        vaultaire_version = '0.33'
        partiture_version = '0.15'
        springdoc_version = '1.2.30'

        quasar_group = 'co.paralleluniverse'
        quasar_version = constants.getProperty("quasarVersion")
        quasar_exclusions = [
                'co.paralleluniverse**',
                'groovy**',
                'com.esotericsoftware.**',
                'jdk**',
                'junit**',
                'kotlin**',
                'net.rubygrapefruit.**',
                'org.gradle.**',
                'org.apache.**',
                'org.jacoco.**',
                'org.junit**',
                'org.slf4j**',
                'worker.org.gradle.**',
                'com.nhaarman.mockito_kotlin**',
                'org.assertj**',
                'org.hamcrest**',
                'org.mockito**',
                'org.opentest4j**',
                'org.springframework**',
                'reactor.core.publisher**',
                'com.github.manosbatsis.corbeans.spring.boot**'
        ]
    }
    // Spring Dependency Management equivalents, for names see
    // https://github.com/spring-projects/spring-boot/blob//spring-boot-dependencies/pom.xml
    // -----------------------------------------\

    ext['kotlin.version'] = "$kotlin_version"
    ext['spring.version'] = "$spring_version"
    ext['spring-boot.version'] = "$spring_boot_version"
    ext['jackson.version'] = "$jackson_version"
    ext['hibernate.version'] = "$hibernate_version"
    ext['artemis.version'] = "$artemis_version"
    ext['jupiter_api'] = "$jupiter_api"
    ext['netty.version'] = "$netty_version"
    ext['slf4j.version'] = "$slf4j_version"
    ext['log4j.version'] = "$log4j_version"



    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
    }

    dependencies {
        // kotlin plugins
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
        // plugins for asciidoctor
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.6'
        // release to Maven Central through Sonatype OSSRH
        // without the need to use Nexus GUI
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.21.1"
        classpath "gradle.plugin.com.dorongold.plugins:task-tree:1.3.1"
        classpath "co.paralleluniverse:quasar-core:$quasar_version"

    }
}

plugins {
    // TODO The capsule plugin requires the newer DSL plugin block.It would be nice if we could unify all the plugins into one style,
    // but the DSL has some restrictions e.g can't be used on the allprojects section. So we should revisit this if there are improvements in Gradle.
    // Version 1.0.2 of this plugin uses capsule:1.0.1
    id "us.kirchmeier.capsule" version "1.0.2"
    id "com.github.hierynomus.license" version"0.15.0"
}

apply plugin: 'org.jetbrains.dokka'
apply plugin: 'license'
license {
    header rootProject.file("etc/license/header.txt")
    includes(["**/*.java", "**/*.kt"])
    excludes(["**/build/**", "**/config/dev/**"])
    mapping {
        kt='SLASHSTAR_STYLE'
    }
    strictCheck true
}
task licenseFormatForKotlin(type: com.hierynomus.gradle.license.tasks.LicenseFormat) {
    source = fileTree(dir: "./").include("**/*.kt")
}
licenseFormat.dependsOn licenseFormatForKotlin


allprojects {
    apply from: "${rootProject.projectDir}/repositories.gradle"

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://software.r3.com/artifactory/corda' }
        maven { url 'https://jitpack.io' }
    }

    apply plugin: 'project-report'
    apply plugin: "com.dorongold.task-tree"
    apply plugin: 'idea'

    idea {
        module {
            downloadJavadoc = false
            downloadSources = true
        }
    }

    sourceSets {
        main {
            resources {
                srcDir rootProject.file("config/dev")
            }
        }
    }

    task allDeps(type: DependencyReportTask) {}

}


subprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            languageVersion = "1.2"
            apiVersion = "1.2"
            jvmTarget = "1.8"
            freeCompilerArgs = ["-Xjsr305=strict"]
            javaParameters = true   // Useful for reflection.
        }
    }

    test {
        // Use jupiter
        useJUnitPlatform {
            maxHeapSize = "3g"
            includeEngines 'junit-jupiter'
            if (project.hasProperty('enableTestLogging') && project.enableTestLogging) {
                testLogging.showStandardStreams = true
                testLogging.exceptionFormat = 'full'
            }
            else {
                testLogging.showStandardStreams = false
            }
        }
    }

    dependencies{
        // Kotlin
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version")

        // Kotlin Test
        testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
        // JUnit Jupiter
        testImplementation("org.junit.jupiter:junit-jupiter:$jupiter_api")
        // JUnit Vintage
        //testCompileOnly('junit:junit:4.12')
        testRuntimeOnly("org.junit.vintage:junit-vintage-engine:$jupiter_api") {
            because 'allows JUnit 3 and JUnit 4 tests to run'
        }
    }
}


apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'


dependencies {
    // CorDapp dependencies.
    cordapp project(":cordapp-contract")
    cordapp project(":cordapp-workflow")
    // Corda dependencies.
    cordaCompile "$corda_core_release_group:corda-core:$corda_core_release_version"
    cordaRuntime "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"
    // Accounts
    cordapp "$confidential_id_release_group:ci-workflows:$confidential_id_release_version"
    // Corda Accounts
    cordapp "$accounts_release_group:accounts-contracts:$accounts_release_version"
    cordapp "$accounts_release_group:accounts-workflows:$accounts_release_version"
    // Use Partiture for corda flows etc.
    cordapp "com.github.manosbatsis.partiture:partiture:$partiture_version"
    // Use Vaultaire for query DSL, DTOs and services generation
    cordapp "com.github.manosbatsis.vaultaire:vaultaire:$vaultaire_version"
    cordapp "com.github.manosbatsis.vaultaire:vaultaire-plugin-accounts:$vaultaire_version"
    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    cordaCompile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"
}

cordapp {
    info {
        name "Ignored CorDapp"
        vendor "Corda Open Source"
        targetPlatformVersion corda_platform_version
        minimumPlatformVersion corda_platform_version
    }
}

task deployNodes(
        type: net.corda.plugins.Cordform,
        dependsOn: [':bootapp-webserver:jar']) {
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        // Init DB schema updates
        runSchemaMigration = true
        // Add cordapps
        cordapp project(':cordapp-contract')
        cordapp project(':cordapp-workflow')
        // Vaultaire, Partiture
        cordapp "com.github.manosbatsis.vaultaire:vaultaire:$vaultaire_version"
        cordapp "com.github.manosbatsis.vaultaire:vaultaire-plugin-accounts:$vaultaire_version"
        cordapp "com.github.manosbatsis.partiture:partiture:$partiture_version"
        // Confidential Identities
        cordapp "$confidential_id_release_group:ci-workflows:$confidential_id_release_version"
        // Corda Accounts
        cordapp "$accounts_release_group:accounts-contracts:$accounts_release_version"
        cordapp "$accounts_release_group:accounts-workflows:$accounts_release_version"
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
        // extraConfig = [ custom: [jvmArgs: [ "-Xms8G", "-Xmx8G", "-XX:+UseG1GC" ]] ]
    }
    directory "./build/nodes"
    node {
        name "O=Notary Service, L=Zurich, C=CH"
        notary = [validating : false]
        p2pPort 10002
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10043")
        }
        projectCordapp {
            deploy = false
        }
        cordapps.clear()
    }
    node {
        name "O=PartyA,L=London,C=GB"
        p2pPort 10005
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        // Uncomment to have the runnodes script launch the spring boot server
        //webPort 8080
        //webserverJar = "${rootProject.projectDir}/server/build/libs/server-${project.version}.jar"
    }
    node {
        name "O=PartyB,L=New York,C=US"
        p2pPort 10008
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10049")
        }
    }
}
